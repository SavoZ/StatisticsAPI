using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Entiti.DB
{
    public partial class CouponAdminContext : DbContext
    {
        public CouponAdminContext()
        {
        }

        public CouponAdminContext(DbContextOptions<CouponAdminContext> options)
            : base(options)
        {
        }

        public virtual DbSet<ABannerGames> ABannerGames { get; set; }
        public virtual DbSet<ABanners> ABanners { get; set; }
        public virtual DbSet<ABannerSelectedTemplates> ABannerSelectedTemplates { get; set; }
        public virtual DbSet<ABannerSites> ABannerSites { get; set; }
        public virtual DbSet<ABannerSportTemplates> ABannerSportTemplates { get; set; }
        public virtual DbSet<ABannerTemplates> ABannerTemplates { get; set; }
        public virtual DbSet<ALeaguePriority> ALeaguePriority { get; set; }
        public virtual DbSet<AspNetRoles> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaims> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLanguages> AspNetUserLanguages { get; set; }
        public virtual DbSet<AspNetUserLogins> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUserRoles> AspNetUserRoles { get; set; }
        public virtual DbSet<AspNetUsers> AspNetUsers { get; set; }
        public virtual DbSet<ASportPriority> ASportPriority { get; set; }
        public virtual DbSet<ATemplates> ATemplates { get; set; }
        public virtual DbSet<ATemplateSites> ATemplateSites { get; set; }
        public virtual DbSet<ATemplateSports> ATemplateSports { get; set; }
        public virtual DbSet<ATranslations> ATranslations { get; set; }
        public virtual DbSet<BannerGames> BannerGames { get; set; }
        public virtual DbSet<Banners> Banners { get; set; }
        public virtual DbSet<BannerSelectedTemplates> BannerSelectedTemplates { get; set; }
        public virtual DbSet<BannerSites> BannerSites { get; set; }
        public virtual DbSet<BannerSportTemplates> BannerSportTemplates { get; set; }
        public virtual DbSet<BannerTemplates> BannerTemplates { get; set; }
        public virtual DbSet<CouponInfoFields> CouponInfoFields { get; set; }
        public virtual DbSet<CouponLeagueStatistics> CouponLeagueStatistics { get; set; }
        public virtual DbSet<CouponListCouponTypes> CouponListCouponTypes { get; set; }
        public virtual DbSet<CouponListLeagueSettings> CouponListLeagueSettings { get; set; }
        public virtual DbSet<CouponListOddsTypes> CouponListOddsTypes { get; set; }
        public virtual DbSet<CouponListRowHeight> CouponListRowHeight { get; set; }
        public virtual DbSet<CouponListStatisticTypes> CouponListStatisticTypes { get; set; }
        public virtual DbSet<GroupNames> GroupNames { get; set; }
        public virtual DbSet<Languages> Languages { get; set; }
        public virtual DbSet<LeaguePriority> LeaguePriority { get; set; }
        public virtual DbSet<LeaguePromotion> LeaguePromotion { get; set; }
        public virtual DbSet<LeagueVisibility> LeagueVisibility { get; set; }
        public virtual DbSet<LogDataTypes> LogDataTypes { get; set; }
        public virtual DbSet<Logs> Logs { get; set; }
        public virtual DbSet<MigrationHistory> MigrationHistory { get; set; }
        public virtual DbSet<PredefinedCouponLeagues> PredefinedCouponLeagues { get; set; }
        public virtual DbSet<PredefinedCoupons> PredefinedCoupons { get; set; }
        public virtual DbSet<PredefinedCouponSites> PredefinedCouponSites { get; set; }
        public virtual DbSet<PredefinedCouponSports> PredefinedCouponSports { get; set; }
        public virtual DbSet<SiteMarketTemplates> SiteMarketTemplates { get; set; }
        public virtual DbSet<Sites> Sites { get; set; }
        public virtual DbSet<SportPriority> SportPriority { get; set; }
        public virtual DbSet<SportVisibility> SportVisibility { get; set; }
        public virtual DbSet<StatisticsCountries> StatisticsCountries { get; set; }
        public virtual DbSet<StatisticsGroupNames> StatisticsGroupNames { get; set; }
        public virtual DbSet<StatisticsMatches> StatisticsMatches { get; set; }
        public virtual DbSet<StatisticsResultState> StatisticsResultState { get; set; }
        public virtual DbSet<StatisticsSeasons> StatisticsSeasons { get; set; }
        public virtual DbSet<StatisticsTables> StatisticsTables { get; set; }
        public virtual DbSet<StatisticsYesterdaysResults> StatisticsYesterdaysResults { get; set; }
        public virtual DbSet<TemplateAutogeneratedItems> TemplateAutogeneratedItems { get; set; }
        public virtual DbSet<Templates> Templates { get; set; }
        public virtual DbSet<TemplateSites> TemplateSites { get; set; }
        public virtual DbSet<TemplateSports> TemplateSports { get; set; }
        public virtual DbSet<TemplateTypes> TemplateTypes { get; set; }
        public virtual DbSet<ThirdPartyUsers> ThirdPartyUsers { get; set; }
        public virtual DbSet<TranslationGroups> TranslationGroups { get; set; }
        public virtual DbSet<Translations> Translations { get; set; }
        public virtual DbSet<TranslationsSetting> TranslationsSetting { get; set; }
        public virtual DbSet<YesterdaysResultsEventCode> YesterdaysResultsEventCode { get; set; }
        public virtual DbSet<YesterdaysResultsEventName> YesterdaysResultsEventName { get; set; }
        public virtual DbSet<YesterdaysResultsLeagueId> YesterdaysResultsLeagueId { get; set; }
        public virtual DbSet<YesterdaysResultsLeagueName> YesterdaysResultsLeagueName { get; set; }
        public virtual DbSet<YesterdaysResultsSettings> YesterdaysResultsSettings { get; set; }
        public virtual DbSet<YesterdaysResultsSportId> YesterdaysResultsSportId { get; set; }

        // Unable to generate entity type for table 'dbo.TimeZones'. Please see the warning messages.

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
                optionsBuilder.UseSqlServer("Server=SAVO;Database=CouponAdmin;Trusted_Connection=True;");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ABannerGames>(entity =>
            {
                entity.HasKey(e => e.AId);

                entity.ToTable("A_BannerGames");

                entity.Property(e => e.AId).HasColumnName("A_ID");

                entity.Property(e => e.BannerId).HasColumnName("BannerID");

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.EventId).HasColumnName("EventID");

                entity.Property(e => e.UserId).HasMaxLength(128);
            });

            modelBuilder.Entity<ABanners>(entity =>
            {
                entity.HasKey(e => e.AId);

                entity.ToTable("A_Banners");

                entity.Property(e => e.AId).HasColumnName("A_ID");

                entity.Property(e => e.BannerTemplateId).HasColumnName("BannerTemplateID");

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.EmptyBannerImageUrl)
                    .IsRequired()
                    .HasColumnName("EmptyBannerImageURL")
                    .HasMaxLength(1000);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.UserId).HasMaxLength(128);
            });

            modelBuilder.Entity<ABannerSelectedTemplates>(entity =>
            {
                entity.HasKey(e => e.AId);

                entity.ToTable("A_BannerSelectedTemplates");

                entity.Property(e => e.AId).HasColumnName("A_ID");

                entity.Property(e => e.BannerId).HasColumnName("BannerID");

                entity.Property(e => e.BannerSportTemplateId).HasColumnName("BannerSportTemplateID");

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.SportId).HasColumnName("SportID");

                entity.Property(e => e.UserId).HasMaxLength(128);
            });

            modelBuilder.Entity<ABannerSites>(entity =>
            {
                entity.HasKey(e => e.AId);

                entity.ToTable("A_BannerSites");

                entity.Property(e => e.AId).HasColumnName("A_ID");

                entity.Property(e => e.BannerId).HasColumnName("BannerID");

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.Sid)
                    .IsRequired()
                    .HasColumnName("SID")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.SiteId).HasColumnName("SiteID");

                entity.Property(e => e.UserId).HasMaxLength(128);
            });

            modelBuilder.Entity<ABannerSportTemplates>(entity =>
            {
                entity.HasKey(e => e.AId);

                entity.ToTable("A_BannerSportTemplates");

                entity.Property(e => e.AId).HasColumnName("A_ID");

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.SportId).HasColumnName("SportID");

                entity.Property(e => e.TemplateCode)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.UserId).HasMaxLength(128);
            });

            modelBuilder.Entity<ABannerTemplates>(entity =>
            {
                entity.HasKey(e => e.AId);

                entity.ToTable("A_BannerTemplates");

                entity.Property(e => e.AId).HasColumnName("A_ID");

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.TemplateCode)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(128);
            });

            modelBuilder.Entity<ALeaguePriority>(entity =>
            {
                entity.HasKey(e => e.AId);

                entity.ToTable("A_LeaguePriority");

                entity.Property(e => e.AId).HasColumnName("A_ID");

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.LeagueId).HasColumnName("LeagueID");

                entity.Property(e => e.SiteId).HasColumnName("SiteID");

                entity.Property(e => e.SportId).HasColumnName("SportID");
            });

            modelBuilder.Entity<AspNetRoles>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasMaxLength(128)
                    .ValueGeneratedNever();

                entity.Property(e => e.Discriminator)
                    .IsRequired()
                    .HasMaxLength(128);
            });

            modelBuilder.Entity<AspNetUserClaims>(entity =>
            {
                entity.HasIndex(e => e.UserId)
                    .HasName("IX_User_Id");

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasColumnName("User_Id")
                    .HasMaxLength(128);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserClaims)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_dbo.AspNetUserClaims_dbo.AspNetUsers_User_Id");
            });

            modelBuilder.Entity<AspNetUserLanguages>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.LanguageId });

                entity.Property(e => e.UserId).HasMaxLength(128);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.AspNetUserLanguages)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AspNetUserLanguages_Languages");
            });

            modelBuilder.Entity<AspNetUserLogins>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.LoginProvider, e.ProviderKey });

                entity.HasIndex(e => e.UserId)
                    .HasName("IX_UserId");

                entity.Property(e => e.UserId).HasMaxLength(128);

                entity.Property(e => e.LoginProvider).HasMaxLength(128);

                entity.Property(e => e.ProviderKey).HasMaxLength(128);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserLogins)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId");
            });

            modelBuilder.Entity<AspNetUserRoles>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.RoleId });

                entity.HasIndex(e => e.RoleId)
                    .HasName("IX_RoleId");

                entity.HasIndex(e => e.UserId)
                    .HasName("IX_UserId");

                entity.Property(e => e.UserId).HasMaxLength(128);

                entity.Property(e => e.RoleId).HasMaxLength(128);

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.AspNetUserRoles)
                    .HasForeignKey(d => d.RoleId)
                    .HasConstraintName("FK_dbo.AspNetUserRoles_dbo.AspNetRoles_RoleId");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserRoles)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_dbo.AspNetUserRoles_dbo.AspNetUsers_UserId");
            });

            modelBuilder.Entity<AspNetUsers>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasMaxLength(128)
                    .ValueGeneratedNever();

                entity.Property(e => e.Discriminator)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.SiteId).HasColumnName("SiteID");
            });

            modelBuilder.Entity<ASportPriority>(entity =>
            {
                entity.HasKey(e => e.AId);

                entity.ToTable("A_SportPriority");

                entity.Property(e => e.AId).HasColumnName("A_ID");

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.SiteId).HasColumnName("SiteID");

                entity.Property(e => e.SportId).HasColumnName("SportID");
            });

            modelBuilder.Entity<ATemplates>(entity =>
            {
                entity.HasKey(e => e.AId);

                entity.ToTable("A_Templates");

                entity.Property(e => e.AId).HasColumnName("A_ID");

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(128);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Generated).HasDefaultValueSql("((0))");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.NameCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Published).HasDefaultValueSql("((0))");

                entity.Property(e => e.TemplateCode)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.TemplateTypeId).HasColumnName("TemplateTypeID");

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(128);
            });

            modelBuilder.Entity<ATemplateSites>(entity =>
            {
                entity.HasKey(e => e.AId);

                entity.ToTable("A_TemplateSites");

                entity.Property(e => e.AId).HasColumnName("A_ID");

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.SiteId).HasColumnName("SiteID");

                entity.Property(e => e.TemplateId).HasColumnName("TemplateID");

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasColumnName("UserID")
                    .HasMaxLength(128);
            });

            modelBuilder.Entity<ATemplateSports>(entity =>
            {
                entity.HasKey(e => e.AId);

                entity.ToTable("A_TemplateSports");

                entity.Property(e => e.AId).HasColumnName("A_ID");

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.SportId).HasColumnName("SportID");

                entity.Property(e => e.TemplateId).HasColumnName("TemplateID");
            });

            modelBuilder.Entity<ATranslations>(entity =>
            {
                entity.HasKey(e => e.AId);

                entity.ToTable("A_Translations");

                entity.Property(e => e.AId).HasColumnName("A_ID");

                entity.Property(e => e.ChangedByUserId)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.FullWordCode)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Translation)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.TranslationGroupCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TranslationGroupId).HasColumnName("TranslationGroupID");

                entity.Property(e => e.WordCode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BannerGames>(entity =>
            {
                entity.HasKey(e => new { e.BannerId, e.EventId });

                entity.Property(e => e.BannerId).HasColumnName("BannerID");

                entity.Property(e => e.EventId).HasColumnName("EventID");

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.HasOne(d => d.Banner)
                    .WithMany(p => p.BannerGames)
                    .HasForeignKey(d => d.BannerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BannerGames_Banners");
            });

            modelBuilder.Entity<Banners>(entity =>
            {
                entity.HasKey(e => e.BannerId);

                entity.Property(e => e.BannerId).HasColumnName("BannerID");

                entity.Property(e => e.BannerTemplateId).HasColumnName("BannerTemplateID");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.EmptyBannerImageUrl)
                    .IsRequired()
                    .HasColumnName("EmptyBannerImageURL")
                    .HasMaxLength(1000);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.HasOne(d => d.BannerTemplate)
                    .WithMany(p => p.Banners)
                    .HasForeignKey(d => d.BannerTemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Banners_BannerTemplates");
            });

            modelBuilder.Entity<BannerSelectedTemplates>(entity =>
            {
                entity.HasKey(e => new { e.BannerId, e.SportId });

                entity.Property(e => e.BannerId).HasColumnName("BannerID");

                entity.Property(e => e.SportId).HasColumnName("SportID");

                entity.Property(e => e.BannerSportTemplateId).HasColumnName("BannerSportTemplateID");

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.HasOne(d => d.Banner)
                    .WithMany(p => p.BannerSelectedTemplates)
                    .HasForeignKey(d => d.BannerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BannerSelectedTemplates_Banners");

                entity.HasOne(d => d.BannerSportTemplate)
                    .WithMany(p => p.BannerSelectedTemplates)
                    .HasForeignKey(d => d.BannerSportTemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BannerSelectedTemplates_BannerSportTemplates");
            });

            modelBuilder.Entity<BannerSites>(entity =>
            {
                entity.HasKey(e => new { e.BannerId, e.SiteId });

                entity.Property(e => e.BannerId).HasColumnName("BannerID");

                entity.Property(e => e.SiteId).HasColumnName("SiteID");

                entity.Property(e => e.Sid)
                    .IsRequired()
                    .HasColumnName("SID")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.HasOne(d => d.Banner)
                    .WithMany(p => p.BannerSites)
                    .HasForeignKey(d => d.BannerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BannerSites_Banners");

                entity.HasOne(d => d.Site)
                    .WithMany(p => p.BannerSites)
                    .HasForeignKey(d => d.SiteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BannerSites_Sites");
            });

            modelBuilder.Entity<BannerSportTemplates>(entity =>
            {
                entity.HasKey(e => e.BannerSportTemplateId);

                entity.Property(e => e.BannerSportTemplateId).HasColumnName("BannerSportTemplateID");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SportId).HasColumnName("SportID");

                entity.Property(e => e.TemplateCode)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(128);
            });

            modelBuilder.Entity<BannerTemplates>(entity =>
            {
                entity.HasKey(e => e.BannerTemplateId);

                entity.Property(e => e.BannerTemplateId).HasColumnName("BannerTemplateID");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.TemplateCode)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(128);
            });

            modelBuilder.Entity<CouponInfoFields>(entity =>
            {
                entity.HasKey(e => e.InfoFieldId);

                entity.ToTable("Coupon.InfoFields");

                entity.Property(e => e.InfoFieldId).HasColumnName("InfoFieldID");

                entity.Property(e => e.AwayTeamId).HasColumnName("AwayTeamID");

                entity.Property(e => e.EventId).HasColumnName("EventID");

                entity.Property(e => e.GroupName).HasMaxLength(150);

                entity.Property(e => e.HomeTeamId).HasColumnName("HomeTeamID");

                entity.Property(e => e.LeagueId).HasColumnName("LeagueID");
            });

            modelBuilder.Entity<CouponLeagueStatistics>(entity =>
            {
                entity.ToTable("Coupon.LeagueStatistics");
            });

            modelBuilder.Entity<CouponListCouponTypes>(entity =>
            {
                entity.HasKey(e => e.CouponTypeId);

                entity.ToTable("CouponList.CouponTypes");

                entity.Property(e => e.CouponTypeId).HasColumnName("CouponTypeID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<CouponListLeagueSettings>(entity =>
            {
                entity.ToTable("CouponList.LeagueSettings");

                entity.Property(e => e.CouponTypeId).HasColumnName("CouponTypeID");

                entity.Property(e => e.LeagueId).HasColumnName("LeagueID");

                entity.Property(e => e.LeagueName).HasMaxLength(250);

                entity.Property(e => e.OddsId).HasColumnName("OddsID");

                entity.Property(e => e.RowHeightId).HasDefaultValueSql("((1))");

                entity.Property(e => e.SettingsChangedBy).HasMaxLength(150);

                entity.Property(e => e.SiteId).HasColumnName("SiteID");

                entity.Property(e => e.SportId).HasColumnName("SportID");

                entity.Property(e => e.StatisticId).HasColumnName("StatisticID");

                entity.HasOne(d => d.CouponType)
                    .WithMany(p => p.CouponListLeagueSettings)
                    .HasForeignKey(d => d.CouponTypeId)
                    .HasConstraintName("FK_CouponList.LeagueSettings_CouponList.CouponTypes");

                entity.HasOne(d => d.Odds)
                    .WithMany(p => p.CouponListLeagueSettings)
                    .HasForeignKey(d => d.OddsId)
                    .HasConstraintName("FK_CouponList.LeagueSettings_CouponList.OddsTypes");

                entity.HasOne(d => d.Statistic)
                    .WithMany(p => p.CouponListLeagueSettings)
                    .HasForeignKey(d => d.StatisticId)
                    .HasConstraintName("FK_CouponList.LeagueSettings_CouponList.StatisticTypes");
            });

            modelBuilder.Entity<CouponListOddsTypes>(entity =>
            {
                entity.HasKey(e => e.OddsId);

                entity.ToTable("CouponList.OddsTypes");

                entity.Property(e => e.OddsId).HasColumnName("OddsID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<CouponListRowHeight>(entity =>
            {
                entity.HasKey(e => e.RowHeightId);

                entity.ToTable("CouponList.RowHeight");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<CouponListStatisticTypes>(entity =>
            {
                entity.HasKey(e => e.StatisticId);

                entity.ToTable("CouponList.StatisticTypes");

                entity.Property(e => e.StatisticId).HasColumnName("StatisticID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<GroupNames>(entity =>
            {
                entity.HasKey(e => e.GroupNameId);

                entity.Property(e => e.GroupNameId).HasColumnName("GroupNameID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<Languages>(entity =>
            {
                entity.HasKey(e => e.LanguageId);

                entity.Property(e => e.LanguageId)
                    .HasColumnName("LanguageID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<LeaguePriority>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.LeagueId });

                entity.HasIndex(e => new { e.OrderNo, e.SiteId, e.LeagueId })
                    .HasName("_dta_index_LeaguePriority_6_1109578991__K1_K2_4");

                entity.Property(e => e.SiteId).HasColumnName("SiteID");

                entity.Property(e => e.LeagueId).HasColumnName("LeagueID");

                entity.Property(e => e.SportId).HasColumnName("SportID");

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.HasOne(d => d.Site)
                    .WithMany(p => p.LeaguePriority)
                    .HasForeignKey(d => d.SiteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LeaguePriority_Sites");
            });

            modelBuilder.Entity<LeaguePromotion>(entity =>
            {
                entity.Property(e => e.LeaguePromotionId).HasColumnName("LeaguePromotionID");

                entity.Property(e => e.LeagueId).HasColumnName("LeagueID");
            });

            modelBuilder.Entity<LeagueVisibility>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.LeagueId });

                entity.Property(e => e.SiteId).HasColumnName("SiteID");

                entity.Property(e => e.LeagueId).HasColumnName("LeagueID");

                entity.HasOne(d => d.Site)
                    .WithMany(p => p.LeagueVisibility)
                    .HasForeignKey(d => d.SiteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LeagueVisibility_Sites");
            });

            modelBuilder.Entity<LogDataTypes>(entity =>
            {
                entity.HasKey(e => e.LogDataTypeId);

                entity.Property(e => e.LogDataTypeId)
                    .HasColumnName("LogDataTypeID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<Logs>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.DetailId).HasColumnName("DetailID");

                entity.Property(e => e.InstanceId).HasColumnName("InstanceID");

                entity.Property(e => e.LogDataTypeId).HasColumnName("LogDataTypeID");

                entity.Property(e => e.LogDate).HasColumnType("datetime");

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasColumnName("UserID")
                    .HasMaxLength(128);

                entity.HasOne(d => d.LogDataType)
                    .WithMany(p => p.Logs)
                    .HasForeignKey(d => d.LogDataTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Log_LogDataType");
            });

            modelBuilder.Entity<MigrationHistory>(entity =>
            {
                entity.HasKey(e => new { e.MigrationId, e.ContextKey });

                entity.ToTable("__MigrationHistory");

                entity.Property(e => e.MigrationId).HasMaxLength(150);

                entity.Property(e => e.ContextKey).HasMaxLength(300);

                entity.Property(e => e.Model).IsRequired();

                entity.Property(e => e.ProductVersion)
                    .IsRequired()
                    .HasMaxLength(32);
            });

            modelBuilder.Entity<PredefinedCouponLeagues>(entity =>
            {
                entity.HasKey(e => new { e.PredefinedCouponId, e.LeagueId });

                entity.ToTable("PredefinedCoupon.Leagues");

                entity.Property(e => e.PredefinedCouponId).HasColumnName("PredefinedCouponID");

                entity.Property(e => e.LeagueId).HasColumnName("LeagueID");

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.HasOne(d => d.PredefinedCoupon)
                    .WithMany(p => p.PredefinedCouponLeagues)
                    .HasForeignKey(d => d.PredefinedCouponId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PredefinedCoupon.Leagues_PredefinedCoupons");
            });

            modelBuilder.Entity<PredefinedCoupons>(entity =>
            {
                entity.HasKey(e => e.PredefinedCouponId);

                entity.Property(e => e.PredefinedCouponId).HasColumnName("PredefinedCouponID");

                entity.Property(e => e.AutoHideScript).HasMaxLength(4000);

                entity.Property(e => e.CouponCode)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Description).IsRequired();

                entity.Property(e => e.Sid)
                    .IsRequired()
                    .HasColumnName("SID")
                    .HasMaxLength(128);

                entity.Property(e => e.TemplateId).HasColumnName("TemplateID");

                entity.Property(e => e.TimeFilter)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Template)
                    .WithMany(p => p.PredefinedCoupons)
                    .HasForeignKey(d => d.TemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PredefinedCoupons_Templates");
            });

            modelBuilder.Entity<PredefinedCouponSites>(entity =>
            {
                entity.HasKey(e => new { e.PredefinedCouponId, e.SiteId });

                entity.ToTable("PredefinedCoupon.Sites");

                entity.Property(e => e.PredefinedCouponId).HasColumnName("PredefinedCouponID");

                entity.Property(e => e.SiteId).HasColumnName("SiteID");

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.HasOne(d => d.PredefinedCoupon)
                    .WithMany(p => p.PredefinedCouponSites)
                    .HasForeignKey(d => d.PredefinedCouponId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PredefinedCoupon.Sites_PredefinedCoupons");

                entity.HasOne(d => d.Site)
                    .WithMany(p => p.PredefinedCouponSites)
                    .HasForeignKey(d => d.SiteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PredefinedCoupon.Sites_Sites");
            });

            modelBuilder.Entity<PredefinedCouponSports>(entity =>
            {
                entity.HasKey(e => new { e.PredefinedCouponId, e.SportId });

                entity.ToTable("PredefinedCoupon.Sports");

                entity.Property(e => e.PredefinedCouponId).HasColumnName("PredefinedCouponID");

                entity.Property(e => e.SportId).HasColumnName("SportID");

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.HasOne(d => d.PredefinedCoupon)
                    .WithMany(p => p.PredefinedCouponSports)
                    .HasForeignKey(d => d.PredefinedCouponId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PredefinedCoupon.Sports_PredefinedCoupons");
            });

            modelBuilder.Entity<SiteMarketTemplates>(entity =>
            {
                entity.HasKey(e => e.SiteMarketTemplateId);

                entity.Property(e => e.SiteMarketTemplateId).HasColumnName("SiteMarketTemplateID");

                entity.Property(e => e.MarketTemplateId).HasColumnName("MarketTemplateID");

                entity.Property(e => e.MarketTemplateName)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.SiteId).HasColumnName("SiteID");

                entity.Property(e => e.SportId).HasColumnName("SportID");
            });

            modelBuilder.Entity<Sites>(entity =>
            {
                entity.HasKey(e => e.SiteId);

                entity.Property(e => e.SiteId)
                    .HasColumnName("SiteID")
                    .ValueGeneratedNever();

                entity.Property(e => e.BaseUrl)
                    .IsRequired()
                    .HasColumnName("BaseURL")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Sid)
                    .HasColumnName("SID")
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Visibility)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.Sites)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Sites_Languages");
            });

            modelBuilder.Entity<SportPriority>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.SportId });

                entity.Property(e => e.SiteId).HasColumnName("SiteID");

                entity.Property(e => e.SportId).HasColumnName("SportID");

                entity.HasOne(d => d.Site)
                    .WithMany(p => p.SportPriority)
                    .HasForeignKey(d => d.SiteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SportPriority_Sites");
            });

            modelBuilder.Entity<SportVisibility>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.SportId });

                entity.Property(e => e.SiteId).HasColumnName("SiteID");

                entity.Property(e => e.SportId).HasColumnName("SportID");

                entity.HasOne(d => d.Site)
                    .WithMany(p => p.SportVisibility)
                    .HasForeignKey(d => d.SiteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SportVisibility_Sites");
            });

            modelBuilder.Entity<StatisticsCountries>(entity =>
            {
                entity.HasKey(e => e.RecordId);

                entity.ToTable("Statistics.Countries");

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.CountryId).HasColumnName("CountryID");

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.SportId).HasColumnName("SportID");

                entity.Property(e => e.SportName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<StatisticsGroupNames>(entity =>
            {
                entity.HasKey(e => new { e.LeaugeId, e.GroupName });

                entity.ToTable("Statistics.GroupNames");

                entity.Property(e => e.LeaugeId).HasColumnName("LeaugeID");

                entity.Property(e => e.GroupName).HasMaxLength(150);
            });

            modelBuilder.Entity<StatisticsMatches>(entity =>
            {
                entity.HasKey(e => e.RecordId);

                entity.ToTable("Statistics.Matches");

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.AwayId).HasColumnName("AwayID");

                entity.Property(e => e.AwayName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CompentitionId).HasColumnName("CompentitionID");

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.EventGroupName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Finished).HasDefaultValueSql("((0))");

                entity.Property(e => e.HomeId).HasColumnName("HomeID");

                entity.Property(e => e.HomeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.MatchId)
                    .IsRequired()
                    .HasColumnName("MatchID")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.SeasonName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SportName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.StartTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<StatisticsResultState>(entity =>
            {
                entity.HasKey(e => e.StateId);

                entity.ToTable("Statistics.ResultState");

                entity.Property(e => e.StateId).ValueGeneratedOnAdd();

                entity.Property(e => e.State)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.StateNavigation)
                    .WithOne(p => p.InverseStateNavigation)
                    .HasForeignKey<StatisticsResultState>(d => d.StateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Statistic__State__26CFC035");
            });

            modelBuilder.Entity<StatisticsSeasons>(entity =>
            {
                entity.HasKey(e => e.RecordId);

                entity.ToTable("Statistics.Seasons");

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.CompentitionId).HasColumnName("CompentitionID");

                entity.Property(e => e.CompentitionName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CountryId).HasColumnName("CountryID");

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.SeasonName)
                    .IsRequired()
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.SportId).HasColumnName("SportID");

                entity.Property(e => e.WinerId).HasColumnName("WinerID");

                entity.Property(e => e.WinerName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<StatisticsTables>(entity =>
            {
                entity.HasKey(e => e.RecordId);

                entity.ToTable("Statistics.Tables");

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.CompetitionId).HasColumnName("CompetitionID");

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.DateModified).HasColumnType("datetime");

                entity.Property(e => e.GroupName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SeasonId).HasColumnName("SeasonID");

                entity.Property(e => e.SeasonName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TeamId).HasColumnName("TeamID");

                entity.Property(e => e.TeamName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<StatisticsYesterdaysResults>(entity =>
            {
                entity.HasKey(e => e.ResultId);

                entity.ToTable("Statistics.YesterdaysResults");

                entity.Property(e => e.ResultId).HasColumnName("ResultID");

                entity.Property(e => e.Away)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.EventId).HasColumnName("EventID");

                entity.Property(e => e.EventName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Fgs).HasColumnName("FGS");

                entity.Property(e => e.Home)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.Ignore).HasDefaultValueSql("((0))");

                entity.Property(e => e.LeagueId).HasColumnName("LeagueID");

                entity.Property(e => e.LeagueName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Period1)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Period2)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Period3)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Period4)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Period5)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Period6)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Period7)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Region)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.SportId).HasColumnName("SportID");

                entity.Property(e => e.SportName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.StateChangedBy).HasMaxLength(128);

                entity.Property(e => e.StateId).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.StateChangedByNavigation)
                    .WithMany(p => p.StatisticsYesterdaysResults)
                    .HasForeignKey(d => d.StateChangedBy)
                    .HasConstraintName("FK__Statistic__State__2C88998B");

                entity.HasOne(d => d.State)
                    .WithMany(p => p.StatisticsYesterdaysResults)
                    .HasForeignKey(d => d.StateId)
                    .HasConstraintName("FK__Statistic__State__2B947552");
            });

            modelBuilder.Entity<TemplateAutogeneratedItems>(entity =>
            {
                entity.HasKey(e => e.TemplateAutogeneratedItemId);

                entity.Property(e => e.TemplateAutogeneratedItemId).HasColumnName("TemplateAutogeneratedItemID");

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.SiteId).HasColumnName("SiteID");

                entity.Property(e => e.TemplateId).HasColumnName("TemplateID");

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.TemplateAutogeneratedItems)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TemplateAutogeneratedItems_Languages");

                entity.HasOne(d => d.Site)
                    .WithMany(p => p.TemplateAutogeneratedItems)
                    .HasForeignKey(d => d.SiteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TemplateAutogeneratedItems_Sites");

                entity.HasOne(d => d.Template)
                    .WithMany(p => p.TemplateAutogeneratedItems)
                    .HasForeignKey(d => d.TemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TemplateAutogeneratedItems_Templates");
            });

            modelBuilder.Entity<Templates>(entity =>
            {
                entity.HasKey(e => e.TemplateId);

                entity.Property(e => e.TemplateId).HasColumnName("TemplateID");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.NameCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Sid)
                    .IsRequired()
                    .HasColumnName("SID")
                    .HasMaxLength(128);

                entity.Property(e => e.TemplateCode)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.TemplateTypeId).HasColumnName("TemplateTypeID");

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.HasOne(d => d.TemplateType)
                    .WithMany(p => p.Templates)
                    .HasForeignKey(d => d.TemplateTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Templates_TemplateTypes");
            });

            modelBuilder.Entity<TemplateSites>(entity =>
            {
                entity.HasKey(e => new { e.TemplateId, e.SiteId });

                entity.HasIndex(e => new { e.SiteId, e.TemplateId })
                    .HasName("_dta_index_TemplateSites_6_1365579903__K1_2");

                entity.Property(e => e.TemplateId).HasColumnName("TemplateID");

                entity.Property(e => e.SiteId).HasColumnName("SiteID");

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasColumnName("UserID")
                    .HasMaxLength(128);

                entity.HasOne(d => d.Site)
                    .WithMany(p => p.TemplateSites)
                    .HasForeignKey(d => d.SiteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TemplateSites_Sites");

                entity.HasOne(d => d.Template)
                    .WithMany(p => p.TemplateSites)
                    .HasForeignKey(d => d.TemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TemplateSites_Templates");
            });

            modelBuilder.Entity<TemplateSports>(entity =>
            {
                entity.HasKey(e => new { e.TemplateId, e.SportId });

                entity.Property(e => e.TemplateId).HasColumnName("TemplateID");

                entity.Property(e => e.SportId).HasColumnName("SportID");

                entity.HasOne(d => d.Template)
                    .WithMany(p => p.TemplateSports)
                    .HasForeignKey(d => d.TemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TemplateSports_Templates");
            });

            modelBuilder.Entity<TemplateTypes>(entity =>
            {
                entity.HasKey(e => e.TemplateTypeId);

                entity.Property(e => e.TemplateTypeId)
                    .HasColumnName("TemplateTypeID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ThirdPartyUsers>(entity =>
            {
                entity.HasKey(e => e.ThirdPartyId);

                entity.Property(e => e.ApiKey)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TranslationGroups>(entity =>
            {
                entity.HasKey(e => e.TranslationGroupId);

                entity.Property(e => e.TranslationGroupId)
                    .HasColumnName("TranslationGroupID")
                    .ValueGeneratedNever();

                entity.Property(e => e.GroupCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.GroupName)
                    .IsRequired()
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<Translations>(entity =>
            {
                entity.HasKey(e => e.TranslationId);

                entity.HasIndex(e => new { e.Translation, e.FullWordCode })
                    .HasName("_dta_index_Translations_6_110623437__K7_8");

                entity.Property(e => e.TranslationId).HasColumnName("TranslationID");

                entity.Property(e => e.FullWordCode)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.LanguageCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageId).HasColumnName("LanguageID");

                entity.Property(e => e.Translation)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.TranslationGroupCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TranslationGroupId).HasColumnName("TranslationGroupID");

                entity.Property(e => e.UsedOn).HasColumnType("datetime");

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.WordCode)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.Translations)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Translations_Languages");

                entity.HasOne(d => d.TranslationGroup)
                    .WithMany(p => p.Translations)
                    .HasForeignKey(d => d.TranslationGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Translations_TranslationGroups");
            });

            modelBuilder.Entity<TranslationsSetting>(entity =>
            {
                entity.Property(e => e.LastUpdate).HasColumnType("datetime");
            });

            modelBuilder.Entity<YesterdaysResultsEventCode>(entity =>
            {
                entity.ToTable("YesterdaysResults.EventCode");
            });

            modelBuilder.Entity<YesterdaysResultsEventName>(entity =>
            {
                entity.ToTable("YesterdaysResults.EventName");

                entity.Property(e => e.EventName)
                    .IsRequired()
                    .HasMaxLength(512)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<YesterdaysResultsLeagueId>(entity =>
            {
                entity.ToTable("YesterdaysResults.LeagueId");
            });

            modelBuilder.Entity<YesterdaysResultsLeagueName>(entity =>
            {
                entity.ToTable("YesterdaysResults.LeagueName");

                entity.Property(e => e.LeagueName)
                    .IsRequired()
                    .HasMaxLength(512)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<YesterdaysResultsSettings>(entity =>
            {
                entity.ToTable("YesterdaysResults.Settings");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ShouldCache).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<YesterdaysResultsSportId>(entity =>
            {
                entity.ToTable("YesterdaysResults.SportId");
            });
        }
    }
}
